import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

class CMAC{
	SecretKey key;
	byte[] k1, k2;
	static byte[] irrPoly = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,(byte)0x87};
	
	public static byte[] gfMult(byte[] toMult) {
		return null;//TODO
	}
	
	public CMAC(SecretKey key) throws Exception{
		//TODO
	}
	
	public byte[] authentify(byte[] message) throws Exception {
		return null;//TODO
	}
}

public class CCM {
	SecretKey key;
	
	public CCM(SecretKey key){
		this.key = key;
	}
	
	public static byte[] hexStringToByteArray(String hex) {//generated by ChatGPT
		if(hex.length() % 2 == 1)
			hex = "0" + hex;
		int len = hex.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(hex.charAt(i), 16) << 4) + Character.digit(hex.charAt(i + 1), 16));
        }
        return data;
    }
	
	public static String byteArrayToHexString(byte[] byteArray) { //generated by ChatGPT
        StringBuilder hexString = new StringBuilder();
        for (byte b : byteArray) {
            hexString.append(String.format("%02X", b));
        }
        return hexString.toString();
    }
	
	public static byte[] formatedTagInput(byte[] nonce, byte[] assData, byte[] plaintext, int tlen) {
		byte[] formatedNonce = new byte[16];
		formatedNonce[0] |= 0x40;
		int t = (tlen - 2) / 2;
		formatedNonce[0] |= ((t % 2) + (((t / 2) % 2) * 2) + (((t / 4) % 2)) * 4) * 8;
		int q = 14 - nonce.length;
		formatedNonce[0] |= q % 2 + ((q / 2) % 2) * 2 + (((q / 4) % 2) * 4);
		for(int i = 0; i < nonce.length; i++) {
			formatedNonce[i + 1] = nonce[i];
		}
		String pHex = Integer.toHexString(plaintext.length);
		byte[] pByte = CCM.hexStringToByteArray(pHex);
		for(int i = 0; i < pByte.length; i++) {
			formatedNonce[16 + i - pByte.length] |= pByte[i];
		}
		byte[] formatedAssData;
		if(assData.length > 0) {
			if(assData.length < 65280) {
				formatedAssData = new byte[2 + assData.length + ((2 + assData.length) % 16 == 0? 0: 16 - ((2 + assData.length) % 16))];
				//System.out.println(assData.length);
				formatedAssData[0] = (byte)(assData.length / 256);
				formatedAssData[1] = (byte)(assData.length % 256);
				for(int i = 0; i < assData.length; i++) {
					formatedAssData[i + 2] = assData[i];
				}
			}
			else {
				formatedAssData = new byte[6 +assData.length + ((6 + assData.length) % 16 == 0? 0: 16 - ((6 + assData.length) % 16))];
				formatedAssData[0] = (byte) 0xff;
				formatedAssData[1] = (byte) 0xfe;
				int a = assData.length;
				for(int i = 0; i < 6; ) {
					formatedAssData[7 - i] = (byte)(a % 256);
					a /= 256;
				}
				for(int i = 0; i < assData.length; i++) {
					formatedAssData[i + 6] = assData[i];
				}
			}
		}
		else {
			formatedAssData = new byte[0];
		}
		byte[] formatedPlaintext = new byte[plaintext.length + (plaintext.length % 16 == 0? 0: 16 - (plaintext.length % 16))];
		for(int i = 0; i < plaintext.length; i++) {
			formatedPlaintext[i] = plaintext[i];
		}
		byte[] input = new byte[formatedNonce.length + formatedAssData.length + formatedPlaintext.length];
		for(int i = 0; i < formatedNonce.length; i++) {
			input[i] = formatedNonce[i];
		}
		for(int i = 0; i < formatedAssData.length; i++) {
			input[i + formatedNonce.length] = formatedAssData[i];
		}
		for(int i = 0; i < formatedPlaintext.length; i++) {
			input[i + formatedNonce.length + formatedAssData.length] = formatedPlaintext[i];
		}
		//System.out.println(CCM.byteArrayToHexString(input));
		return input;
	}
	
	public static IvParameterSpec formatedCounter(byte[] nonce) {
		byte[] formatedCounter = new byte[16];
		int q = 14 - nonce.length;
		formatedCounter[0] |= q % 2 + ((q / 2) % 2) * 2 + ((((q / 4) % 2)) * 4);
		for(int i = 0; i < nonce.length; i++) {
			formatedCounter[i + 1] = nonce[i];
		}
		IvParameterSpec counter = new IvParameterSpec(formatedCounter);
		return counter;
	}
	
	public byte[] tag(byte[] nonce, byte[] assData, byte[] plaintext, int tlen) throws Exception {
		return null;//TODO
	}
	
	public byte[] encryptGenerate(byte[] nonce, byte[] assData, byte[] plaintext, int tlen) throws Exception{
		return null;//TODO
	}
	
	public byte[] decryptVerify(byte[] nonce, byte[] assData, byte[] cyphertext, int tlen) throws Exception{
		return null; //TODO
	}
	
	public static void main(String[] args) {
		String key = "2B7E151628AED2A6ABF7158809CF4F3C";
		byte[] keyBytes = CCM.hexStringToByteArray(key);
		SecretKey secretKey = new SecretKeySpec(keyBytes, "AES");
		String key2 = "404142434445464748494A4B4C4D4E4F";
		byte[] keyBytes2 = CCM.hexStringToByteArray(key2);
		SecretKey secretKey2 = new SecretKeySpec(keyBytes2, "AES");
		try {
			CMAC cmac = new CMAC(secretKey);
			byte[] messageByte = new byte[0];
			byte[] macValue = cmac.authentify(messageByte);
			System.out.println(byteArrayToHexString(macValue));
			String message = "6BC1BEE22E409F96E93D7E117393172A";
			messageByte = CCM.hexStringToByteArray(message);
			macValue = cmac.authentify(messageByte);
			System.out.println(byteArrayToHexString(macValue));
			message = "6BC1BEE22E409F96E93D7E117393172AAE2D8A57";
			messageByte = CCM.hexStringToByteArray(message);
			macValue = cmac.authentify(messageByte);
			System.out.println(byteArrayToHexString(macValue));
			message = "6BC1BEE22E409F96E93D7E117393172AAE2D8A571E03AC9C9EB76FAC45AF8E5130C81C46A35CE411E5FBC1191A0A52EFF69F2445DF4F9B17AD2B417BE66C3710";
			messageByte = CCM.hexStringToByteArray(message);
			macValue = cmac.authentify(messageByte);
			System.out.println(byteArrayToHexString(macValue));
			String nonce = "10111213141516", assData = "0001020304050607", plaintext = "20212223";
			byte[] nonceByte = CCM.hexStringToByteArray(nonce), assDataByte = CCM.hexStringToByteArray(assData), plaintextByte = CCM.hexStringToByteArray(plaintext);
			CCM ccm = new CCM(secretKey2);
			byte[] cypher = ccm.encryptGenerate(nonceByte, assDataByte, plaintextByte, 4);
			System.out.println(CCM.byteArrayToHexString(cypher));
			byte[] decypher = ccm.decryptVerify(nonceByte, assDataByte, cypher, 4);
			System.out.println(CCM.byteArrayToHexString(decypher));
			String nonce2 = "1011121314151617", assData2 = "000102030405060708090A0B0C0D0E0F", plaintext2 = "202122232425262728292A2B2C2D2E2F";
			byte[] nonceByte2 = CCM.hexStringToByteArray(nonce2), assDataByte2 = CCM.hexStringToByteArray(assData2), plaintextByte2 = CCM.hexStringToByteArray(plaintext2);
			CCM ccm2 = new CCM(secretKey2);
			byte[] cypher2 = ccm2.encryptGenerate(nonceByte2, assDataByte2, plaintextByte2, 6);
			System.out.println(CCM.byteArrayToHexString(cypher2));
			byte[] decypher2 = ccm2.decryptVerify(nonceByte2, assDataByte2, cypher2, 6);
			System.out.println(CCM.byteArrayToHexString(decypher2));
			String nonce3 = "101112131415161718191A1B", assData3 = "000102030405060708090A0B0C0D0E0F10111213", plaintext3 = "202122232425262728292A2B2C2D2E2F3031323334353637";
			byte[] nonceByte3 = CCM.hexStringToByteArray(nonce3), assDataByte3 = CCM.hexStringToByteArray(assData3), plaintextByte3 = CCM.hexStringToByteArray(plaintext3);
			CCM ccm3 = new CCM(secretKey2);
			byte[] cypher3 = ccm3.encryptGenerate(nonceByte3, assDataByte3, plaintextByte3, 8);
			System.out.println(CCM.byteArrayToHexString(cypher3));
			byte[] decypher3 = ccm3.decryptVerify(nonceByte3, assDataByte3, cypher3, 8);
			System.out.println(CCM.byteArrayToHexString(decypher3));
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
}
